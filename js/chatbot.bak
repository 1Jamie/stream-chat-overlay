/* youtube conneaciton for chat base setup
    we are going to need to first query for base of "are we streaming right now"
    then if we are "what is our stream Chat ID" which will be returned when we check
    for currently running Streams  
*/
var n = 0;
var liveChatID;
var lastYoutubMsg;
var chatArea = document.getElementById("chat");
function request() {
    return gapi.client.youtube.liveBroadcasts.list({
            "part": "snippet,contentDetails,status",
            "broadcastStatus": "all",
            "broadcastType": "all"
        })
        .then(function (response) {
                // we should get the stuffs here....
                console.log("Response", response);
                window['liveChatID'] = response.result.items[0].snippet.liveChatId;
                console.log(liveChatID);
            },
            function (err) {
                console.error("Execute error", err);
            }
        ).then(function () {
            getmessages();
        });
}

function signin() {
    //lets go and do a full auth before we go and ask for stuf
    return gapi.auth2.getAuthInstance()
        .signIn({
            scope: 'https://www.googleapis.com/auth/youtube.readonly'
        })
        .then(function () {
                console.log("sign-in successful!");
            },
            function (err) {
                console.error("error signing in", err);
            }).then(gapi.auth2.getAuthInstance().isSignedIn.get())
        .then(request);
}
//this is where we are going to take the stream ID and get the messages from youtube
//youtube responds with a json where you are going to find the messages under 
//  reponse.result.items[n].snippet  and the messages will be each item when requested from liveChatMessages.list
//  and the actual text will be found in the textMessageDetails.messageText 
function getmessages() {
    setInterval(function () {
        return gapi.client.youtube.liveChatMessages.list({
                'liveChatId': liveChatID,
                'part': 'id,snippet,authorDetails'
            })
            .then(function (response) {
                console.log(response.result.items[n]);
                while (response.result.items[n] != undefined) {
                    var parsedYmessage = response.result.items[n].snippet.textMessageDetails.messageText;
                    var messageAuthor = response.result.items[n].authorDetails.displayName;
                    var authorImg = response.result.items[n].authorDetails.profileImageUrl;
                    var newcnt = document.createElement("p");
                    var newImg = document.createElement("img");
                    var newBr = document.createElement("br");
                    newcnt.id = response.result.items[n].snippet.textMessageDetails.id;
                    newImg.id = response.result.items[n].snippet.textMessageDetails.id;
                    newImg.setAttribute('class', 'messageImg' );
                    var msgContent = document.createTextNode(messageAuthor + ": " + parsedYmessage);
                    newImg.setAttribute('src', authorImg);
                    chatArea.appendChild(newImg);
                    newcnt.appendChild(msgContent);
                    chatArea.appendChild(newcnt);
                    chatArea.appendChild(newBr);
                    setTimeout(function () {
                        document.getElementById(newcnt.id).remove();
                    }, 10000);
                    n++;

                }

            });
    }, 5000);
}

function start() {
    //does what you think, intializes
    gapi.client.init({
            apiKey: 'AIzaSyBrd2E4vyr0cpdp56kduGgi2Ek-cqc4aAU',
            discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest"],
            clientId: '717620289810-r1nk784nd8rp2rqmag9kd3k5s3ro91gs.apps.googleusercontent.com',
            scope: 'https://www.googleapis.com/auth/youtube.readonly'
        }).then(function () {
            //goes and gets us our pretty api's
            return gapi.client.request({
                'path': 'https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest'
            });
        }).then(function (response) {
            //this will just tell use we got it :D
            console.log(response.result);
            //.... or that we didnt :.(
        }, function (reason) {
            console.log('Error: ' + reason.result.error.message);
        })
        .then(signin);

}
//now we might as well of go ahead and make a request to get this ball rolling
gapi.load('client', start, getmessages);

/*   
    This shit is where the twitch magic happens it's what connects to chat and parses messages as they come barreling along. The chat client connects via a 
    Web Socket to Twitch chat. (not a fan of websockets :p)
    */

var messageid = 0;
var chatClient = function chatClient(options) {
    this.username = options.username;
    this.password = options.password;
    this.channel = options.channel;

    this.server = 'irc-ws.chat.twitch.tv';
    this.port = 443;
};

//break it down for the javascript connection to irc barny style
chatClient.prototype.open = function open() {
    this.webSocket = new WebSocket('wss://' + this.server + ':' + this.port + '/', 'irc');

    this.webSocket.onmessage = this.onMessage.bind(this);
    this.webSocket.onerror = this.onError.bind(this);
    this.webSocket.onclose = this.onClose.bind(this);
    this.webSocket.onopen = this.onOpen.bind(this);
};

chatClient.prototype.onError = function onError(message) {
    //console.log('Error: ' + message);
};

//kinda important to tell it what to do when it gets a message.... would defeat the purpose otherwise
chatClient.prototype.onMessage = function onMessage(message) {
    if (message !== null) {
        var parsed = this.parseMessage(message.data);
        if (parsed !== null) {
            if (parsed.command === "PING") {
                this.webSocket.send("PONG :" + parsed.message);
            }
        }
    }
};

// we should tell it what to do when it does open
chatClient.prototype.onOpen = function onOpen() {
    var socket = this.webSocket;

    if (socket !== null && socket.readyState === 1) {
        console.log('Connecting and authenticating...');

        socket.send('CAP REQ :twitch.tv/tags twitch.tv/commands twitch.tv/membership');
        socket.send('PASS ' + this.password);
        socket.send('NICK ' + this.username);
        socket.send('JOIN ' + this.channel);
    }
};

chatClient.prototype.onClose = function onClose() {
    console.log('Disconnected from the chat server.');
};

chatClient.prototype.close = function close() {
    if (this.webSocket) {
        this.webSocket.close();
    }
};

//start up the parser!!!! define the pieces!!! LOAD THE CANNONS!!!!!
chatClient.prototype.parseMessage = function parseMessage(rawMessage) {
    var parsedMessage = {
        message: null,
        tags: null,
        command: null,
        original: rawMessage,
        channel: null,
        username: null
    };
    //then the fun begins.... lets start to fill them! FIRE!!!!!!!
    if (rawMessage[0] === '@') {
        var tagIndex = rawMessage.indexOf(' '),
            userIndex = rawMessage.indexOf(' ', tagIndex + 1),
            commandIndex = rawMessage.indexOf(' ', userIndex + 1),
            channelIndex = rawMessage.indexOf(' ', commandIndex + 1),
            messageIndex = rawMessage.indexOf(':', channelIndex + 1);
        //then we get the juicy stuffs we want :D
        parsedMessage.tags = rawMessage.slice(0, tagIndex);
        parsedMessage.username = rawMessage.slice(tagIndex + 2, rawMessage.indexOf('!'));
        parsedMessage.command = rawMessage.slice(userIndex + 1, commandIndex);
        parsedMessage.channel = rawMessage.slice(commandIndex + 1, channelIndex);
        parsedMessage.message = rawMessage.slice(messageIndex + 1);
        //parsedMessage.isSub = parsedMessage.tags.indexOf('badges', subscriber + 1);
    } else if (rawMessage.startsWith("PING")) {
        parsedMessage.command = "PING";
        parsedMessage.message = rawMessage.split(":")[1];
    }
    //this is where we are going to write the message to the div
    console.log(parsedMessage.message, parsedMessage.isSub, parsedMessage.tags);
    if ((parsedMessage.username != null) && (parsedMessage.username.includes('tmi.twitch.tv') != true)) {
        var newcnt = document.createElement("p");
        var msgContent = document.createTextNode(parsedMessage.username + ": " + parsedMessage.message);
        newcnt.appendChild(msgContent);
        newcnt.id = messageid;
        chatArea.appendChild(newcnt);
        setTimeout(function () {
            newcnt.remove();
        }, 10000);
        //setTimeout(function(){
        //    deleteMessage();
        //}, 10000);
        messageid++;
    }
    return parsedMessage;
};